// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// User model for authentication and role management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?  @unique
  password  String
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  adminProfile AdminProfile?
  riderProfile RiderProfile?

  @@map("users")
}

// Admin/Supplier profile
model AdminProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

// Rider profile
model RiderProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  phone     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders   Order[]

  @@map("rider_profiles")
}

// Customer model
model Customer {
  id          String   @id @default(cuid())
  name        String
  phone       String   @unique
  whatsapp    String?  // WhatsApp number (optional)
  houseNo     String?  // House number
  streetNo    String?  // Street number
  area        String?  // Area/neighborhood
  city        String?
  bottleCount Int      @default(0) // Number of bottles customer has
  avgDaysToRefill Int? // Average days between refills (optional)
  isActive    Boolean  @default(true)
  currentBalance Decimal @default(0) // Current balance (can be negative or positive)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders   Order[]

  @@map("customers")
}

// Order model
model Order {
  id          String      @id @default(cuid())
  customerId  String
  riderId     String?
  status      OrderStatus @default(PENDING)
  priority    Priority    @default(NORMAL)
  notes       String?
  totalAmount Decimal
  // Payment fields
  paidAmount      Decimal       @default(0)
  paymentStatus   PaymentStatus @default(NOT_PAID)
  paymentMethod   PaymentMethod @default(CASH)
  paymentNotes    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deliveredAt DateTime?

  // Relations
  customer Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  rider    RiderProfile? @relation(fields: [riderId], references: [id], onDelete: SetNull)

  @@map("orders")
}


// Notification model for push notifications (keeping existing)
model Notification {
  id        String           @id @default(cuid())
  userId    String?          // If null, it's a system-wide notification
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Advanced Notification System Tables (ab_ prefix for central DB)

// Device registration for multi-device push notifications
model AbUserDevice {
  id                 String    @id @default(cuid())
  userId             String
  deviceType         String    // 'android', 'ios', 'desktop', 'tablet'
  deviceName         String?   // 'Samsung S21', 'iPhone 14', etc.
  pushSubscription   Json?     // Web Push subscription object
  webSocketId        String?   // Current socket connection ID
  fcmToken           String?   // Optional FCM token for hybrid approach
  isOnline           Boolean   @default(false)
  lastSeen           DateTime  @default(now())
  notificationSettings Json?   // User preferences for this device
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  deliveryStatus AbNotificationDeliveryStatus[]

  @@map("ab_user_devices")
  @@index([userId])
  @@index([isOnline])
  @@index([webSocketId])
}

// Advanced notifications with full tracking
model AbNotification {
  id                String    @id @default(cuid())
  userId            String    // Target user ID
  type              String    // 'order_assigned', 'order_completed', etc.
  title             String
  body              String
  data              Json?     // Additional payload
  targetUrl         String?   // Deep link URL
  priority          String    @default("normal") // 'low', 'normal', 'high', 'urgent'
  isRead            Boolean   @default(false)
  readAt            DateTime?
  deliveredDevices  Json?     // Array of device IDs that received it
  createdAt         DateTime  @default(now())
  expiresAt         DateTime? // Optional expiration

  // Relations
  deliveryStatus AbNotificationDeliveryStatus[]

  @@map("ab_notifications")
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

// Track delivery status per device
model AbNotificationDeliveryStatus {
  id              String        @id @default(cuid())
  notificationId  String
  deviceId        String
  deliveryStatus  String        @default("sent") // 'sent', 'delivered', 'failed', 'clicked'
  deliveredAt     DateTime?
  clickedAt       DateTime?
  errorMessage    String?
  createdAt       DateTime      @default(now())

  // Relations
  notification AbNotification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  device       AbUserDevice   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("ab_notification_delivery_status")
  @@index([notificationId])
  @@index([deviceId])
  @@index([deliveryStatus])
}

// Enums
enum UserRole {
  ADMIN
  RIDER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum PaymentStatus {
  PAID
  NOT_PAID
  OVERPAID
  PARTIAL
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_WALLET
}

enum NotificationType {
  ORDER_ASSIGNED
  ORDER_DELIVERED
  PAYMENT_RECEIVED
  PAYMENT_OVERDUE
  SYSTEM_UPDATE
}

